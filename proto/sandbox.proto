syntax = "proto3";

option go_package = "github.com/Kidr1cE/golang-oj-worker/proto/grpc";

// HealthCheck
message HealthCheckRequest {}
message HealthCheckResponse {
    bool status = 1;
}

// GetDockerStatus
message GetStatusRequest{}
message GetStatusResponse{
    bool status = 1;
    string message = 2;
}

// SetEnv
message SetEnvRequest {
    string image_name = 1;
    string entryshell = 2;
    string language = 3;    // python, golang
    string id = 4;
}

message SetEnvResponse {
    bool status = 1;
    string message = 2;
}

// Run
message AnalysisResult {
    int32 Row = 1;
    int32 Column = 2;
    string Message = 3;
}

message TimeResult {
    string system_time_seconds = 1;
    string user_time_seconds = 2;
    string percent_cpu = 3;
    string avg_shared_text_size = 4;
    string avg_unshared_data_size = 5;
    string max_resident_set_size = 6;
    string file_system_inputs = 7;
    string file_system_outputs = 8;
    string exit_status = 9;
}

message SimpleRunRequest {
    string filename = 1;
    string input = 2;
}

message SimpleRunResponse {
    string output = 1;
    repeated AnalysisResult analysis_results = 2;
    TimeResult time_result = 3;
}

service Sandbox {
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {}
    rpc GetDockerStatus(GetStatusRequest) returns (GetStatusResponse) {}
    rpc SetEnv(SetEnvRequest) returns (SetEnvResponse) {}
    rpc SimpleRun(SimpleRunRequest) returns (SimpleRunResponse) {}
}
